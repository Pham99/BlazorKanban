@page "/graph"
@layout Layout.MainLayout
@inject KanbanCardService KCardS


<div class="container">
	<LineChart @ref="lineChart" Width="1000" Class="mb-4"/>
</div>


@code 
{
	private LineChart lineChart = default!;
	private LineChartOptions lineChartOptions = default!;
	private ChartData chartData = default!;

	protected async override Task OnInitializedAsync()
	{
		List<KanbanCardModel> cards = await KCardS.GetCardsListAsync();

		int totalStoryPoints = (int)cards.Sum(card => card.StoryPoints)!;
		float points = (float)totalStoryPoints;
		int days = 7;
		float ratio = (float)totalStoryPoints! / (days - 1);

		List<double> idealData = new List<double>();

		for(int i = 0; i < days; i++)
		{
			idealData.Add(points);
			points -= ratio;
		}

		List<DateTime> dates = new List<DateTime>();
		DateTime today = DateTime.Today;
		for (int i = 0; i < days; i++)
		{
			dates.Add(today.AddDays(i));
		}

		List<string> stringDates = dates.Select(dt => dt.ToString("dd/MM/yyyy")).ToList();

		List<double> realData = new List<double>();
		for (int i = 0; i < days; i++)
		{
			double data = (double)cards.Where(card => card.DateComplete != null).Where(c => c.DateComplete < dates[i].AddDays(1)).Sum(c => c.StoryPoints)!;
			realData.Add(totalStoryPoints - data);
			if (!cards.Any(c => c.DateComplete > dates[i]))
			{
				break;
			}
		}

		var colors = ColorUtility.CategoricalTwelveColors;

		var labels = stringDates;
		var datasets = new List<IChartDataset>();

		var dataset1 = new LineChartDataset
			{
			Label = "Real Pogress",
			Data = realData,
			BackgroundColor = new List<string> { colors[0] },
			BorderColor = new List<string> { colors[0]},
			BorderWidth = new List<double> { 4 },
			HoverBorderWidth = new List<double> { 1 },
			PointBackgroundColor = new List<string> { colors[0]},
			PointRadius = new List<int> { 0 },
			PointHoverRadius = new List<int> { 4 },
		};

		var dataset2 = new LineChartDataset
			{
			Label = "Ideal Pogress",
			Data = idealData,
			BackgroundColor = new List<string> { colors[1] },
			BorderColor = new List<string> { colors[1] },
			BorderWidth = new List<double> { 4 },
			HoverBorderWidth = new List<double> { 1 },
			PointBackgroundColor = new List<string> { colors[1] },
			PointRadius = new List<int> { 0 },
			PointHoverRadius = new List<int> { 4 },
		};
		datasets.Add(dataset1);
		datasets.Add(dataset2);

		chartData = new ChartData { Labels = labels, Datasets = datasets };

		lineChartOptions = new();
		lineChartOptions.Responsive = true;
		lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

		lineChartOptions.Scales.X!.Title = new ChartAxesTitle { Text = "Days", Display = true };
		lineChartOptions.Scales.Y!.Title = new ChartAxesTitle { Text = "Story Points", Display = true };

		lineChartOptions.Plugins.Title!.Text = "Burndown";
		lineChartOptions.Plugins.Title.Display = true;

	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await lineChart.InitializeAsync(chartData, lineChartOptions);
		}
		await base.OnAfterRenderAsync(firstRender);
	}
}
