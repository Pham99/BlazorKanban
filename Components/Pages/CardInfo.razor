@page "/cardinfo/{id:int}"
@layout Layout.MainLayout
@inject NavigationManager NavMan
@inject KanbanCardService KCardS
@inject KanbanColumnService KColumnS

<div class="form-container">
	<h1>@Card.Title</h1>
	<h6>by @Card.User.Name</h6>
	<div>@Card.Description</div>
	<h6>Story points: @Card.StoryPoints</h6>
	@if( Card.DateComplete != null)
	{
		<div>Completed on @Card.DateComplete</div>
	}
</div>


<div class="form-container">
	<h1>Mark Complete</h1>
	<form>
		<label for="Date">Date</label>
		<input id="Date" type="date" @bind="newDate" />
		<button @onclick="MarkComplete">Mark Complete</button>
	</form>
</div>

<div class="form-container">
	<h1>Move Card</h1>
	<select @bind="DestinationId">
		@foreach(var column in Columns)
		{
			<option value="@column.Id">@column.Name</option>
		}
	</select>
	<button @onclick="Move">Move</button>
</div>
<div class="form-container">
	<h1>Delete Card</h1>
	<button class="button-red" @onclick="DeleteCard">DELETE</button>
</div>

@code {
	[Parameter]
	public int Id { get; set; }
	private int DestinationId { get; set; }
	private KanbanCardModel Card { get; set; }
	private List<KanbanColumnModel>? Columns { get; set; }
	private DateTime newDate = DateTime.Now;

	protected async override Task OnInitializedAsync()
	{
		var CardTask = KCardS.GetCardByIdAsync(Id);
		var ColumnsTask = KColumnS.GetColumnsAsync();
		Card = await CardTask;
		Columns = await ColumnsTask;
		Columns = Columns.Where(x => x.Id != Card.IdColumn).ToList();
	}

	private async Task Move()
	{
		if (DestinationId > 0)
		{
			await KCardS.MoveCard(Card.Id, DestinationId);
			NavMan.NavigateTo("/dashboard");
		}
	}
	private void MarkComplete()
	{
		Card.DateComplete = newDate;
		KCardS.UpdateCard(Card);
	}
	private void DeleteCard()
	{
		KCardS.RemoveCard(Card);
		NavMan.NavigateTo($"/dashboard");
	}
}
