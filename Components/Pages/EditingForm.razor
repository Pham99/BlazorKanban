@page "/editform/{id:int}"
@layout MainLayout
@using KanbanApp.Components.Layout
@rendermode InteractiveServer
@inject NavigationManager NavMan
@inject UserService US
@inject KanbanCardService KCardS
@inject KanbanColumnService KColumnS

@if (Column != null)
{
    @user.Name
    <div class="form-container">
        <h1>Add Card</h1>
        <form>
            <label for="Title">Title</label>
            <input id="Title" type="text" @bind="newTitle" />
            <label for="Description">Description</label>
            <input id="Description" type="text" @bind="newDescription" />
            <label for="StoryPoins">Story Points</label>
            <div class="d-flex flex-row mb-3">
                <RangeInput TValue="int" @bind-Value="newStoryPoints" Min="1" Max="10" Id="StoryPoints" />
                <Badge Color="BadgeColor.Primary" Class="ms-2" VisuallyHiddenText="newStoryPoints">@newStoryPoints</Badge>
            </div>

            <button @onclick="AddItem">Add Item</button>
        </form>
    </div>

@*     <div class="form-container">
        <h1>Edit Column</h1>
        <form>
            <label for="Title">Title</label>
            <input id="Title" type="text" @bind="Column.Name" />
        </form>
    </div> *@
    <div class="form-container">
        <h1>Delete Column</h1>
        <button class="button-red" @onclick="DeleteColumn">DELETE</button>
    </div>

}
else
{
    <p>nothing here</p>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private KanbanColumnModel? Column { get; set; }
    private string? newTitle;
    private string? newDescription;
    private int? newNumber;
    private UserModel? user;
    private int newStoryPoints;

    protected override async Task OnInitializedAsync()
    {
        Column = await KColumnS.GetColumnAsync(Id);
        user = US.GetUser();
    }

    private async Task AddItem()
    {
        Console.WriteLine("pressed AddItem");
        if (user != null && Column != null)
        {
            KanbanCardModel card = new KanbanCardModel
                {
                    Title = newTitle,
                    Description = newDescription,
                    StoryPoints = newStoryPoints,
                    User = user
                };
            await KCardS.AddCardAsync(card, Id);
            newTitle = "";
            newDescription = "";
        }
    }

    private async Task DeleteColumn()
    {
        await KColumnS.RemoveColumnAsync(Id);
        NavMan.NavigateTo("/dashboard");
    }
}
